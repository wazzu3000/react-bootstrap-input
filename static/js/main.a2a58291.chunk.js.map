{"version":3,"sources":["../../src/Validators.tsx","../../src/BootstrapForm.tsx","../../src/BootstrapTextEdit.tsx","components/BootstrapInput/BootstrapInputDoc.jsx","components/BootstrapInput/BootstrapInputLabelDoc.jsx","components/BootstrapInput/BootstrapInputRequiredDoc.jsx","components/BootstrapInput/BootstrapInputPatternDoc.jsx","components/BootstrapInput/BootstrapInputCustomErrDoc.jsx","components/BootstrapForm/BootstrapFormDoc.jsx","App.js","index.js"],"names":["records","BootstrapForm","props","useEffect","formName","acceptCharset","action","autoComplete","className","encType","id","method","name","noValidate","target","onBlur","onChange","onContextMenu","onFocus","onInput","onInvalid","onReset","onSelect","onSubmit","event","hasErrors","inputs","input","BootstrapTextEdit","value","error","invalid","RegExp","createRef","sedDetaulErrorMessages","this","render","state","required","ref","type","autoFocus","disabled","form","formNoValidate","max","maxLength","min","minLength","pattern","placeholder","readOnly","size","step","bind","componentDidMount","dom","registerInput","componentDidUpdate","prevProps","undefined","componentWillUnmount","inputName","removeInput","validateInput","setState","requiredError","regex","test","patternError","setAsInvalid","Component","BootstrapInputDoc","useState","currentTarget","language","BootstrapInputLabelDoc","label","BootstrapInputRequiredDoc","BootstrapInputPatternDoc","link","href","BootstrapInputCustomErrDoc","BootstrapFormDoc","App","inputBasic","inputLabel","inputRequired","inputRegex","inputCustomErr","inputDefaultError","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a2a58291.chunk.js","sourcesContent":["import { Dictionary } from './Types';\r\nimport { BootstrapTextEdit } from './BootstrapTextEdit';\r\n\r\nconst records: Dictionary<Dictionary<BootstrapTextEdit>> = {};\r\n\r\nexport function registerInput(input: BootstrapTextEdit, formName: string) {\r\n  if (formName && !records[formName]) {\r\n    records[formName] = {}\r\n  }\r\n\r\n  records[formName][input.props.name] = input;\r\n}\r\n\r\nexport function removeInput(formName: string, inputName: string) {\r\n  if (!records[formName]) {\r\n    return\r\n  }\r\n\r\n  delete records[formName][inputName];\r\n}\r\n\r\nexport function getInputs(formName: string): Dictionary<BootstrapTextEdit> {\r\n  return records[formName];\r\n}\r\n\r\nexport function removeForm(formName: string) {\r\n  delete records[formName];\r\n}","import React, { FormEvent, useEffect } from 'react';\r\nimport { Autocomplete, EncTypes, Methods, Targets } from './Types';\r\nimport { removeForm, getInputs } from './Validators';\r\n\r\ninterface Props {\r\n  // Attributes\r\n  acceptCharset?: string;\r\n  action?: string;\r\n  autoComplete?: Autocomplete;\r\n  className: string;\r\n  children: any;\r\n  encType?: EncTypes;\r\n  id?: string;\r\n  method?: Methods;\r\n  name: string;\r\n  target?: Targets;\r\n\r\n  // Events\r\n  onBlur?: () => void;\r\n  onChange?: () => void;\r\n  onContextMenu?: () => void;\r\n  onFocus?: () => void;\r\n  onInput?: () => void;\r\n  onInvalid?: () => void;\r\n  onReset?: () => void;\r\n  onSearch?: () => void;\r\n  onSelect?: () => void;\r\n  onSubmit: (event: FormEvent) => void;\r\n}\r\n\r\nexport function BootstrapForm(props: Props) {\r\n  const onSubmit = (event: FormEvent) => {\r\n    let hasErrors = false;\r\n    const inputs = getInputs(props.name);\r\n    for (let i in inputs) {\r\n      const input = inputs[i];\r\n      input.hasLostFocus = true;\r\n      input.touched = true;\r\n      if (!input.validateInput()) {\r\n        hasErrors = true;\r\n      }\r\n    }\r\n\r\n    if (hasErrors) {\r\n      event.preventDefault();\r\n    }\r\n    \r\n    props.onSubmit && props.onSubmit(event);\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => removeForm(props.name);\r\n  }, [props.name])\r\n\r\n  return (\r\n    <form acceptCharset={props.acceptCharset} action={props.action} autoComplete={props.autoComplete}\r\n      className={props.className} encType={props.encType} id={props.id} method={props.method}\r\n      name={props.name} noValidate target={props.target}\r\n      \r\n      onBlur={props.onBlur}\r\n      onChange={props.onChange}\r\n      onContextMenu={props.onContextMenu}\r\n      onFocus={props.onFocus}\r\n      onInput={props.onInput}\r\n      onInvalid={props.onInvalid}\r\n      onReset={props.onReset}\r\n      onSelect={props.onSelect}\r\n      onSubmit={onSubmit}>\r\n      {\r\n        props.children\r\n      }\r\n    </form>\r\n  )\r\n}\r\n","import React, { Component, FocusEvent, ChangeEvent, MouseEvent, FormEvent, RefObject, createRef } from 'react';\nimport { Autocomplete, InputTypes } from './Types';\nimport { registerInput, removeInput } from './Validators';\n\ninterface Props {\n  // Input attributes\n  autoComplete?: Autocomplete;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  form?: string;\n  formNoValidate?: boolean;\n  id?: string;\n  max?: number;\n  maxLength?: number;\n  min?: number;\n  minLength?: number;\n  name: string;\n  pattern?: string;\n  placeholder?: string;\n  readOnly?: boolean;\n  required?: boolean;\n  size?: number;\n  step?: number;\n  value?: string;\n  type?: InputTypes;\n  label?: string;\n  invalid?: boolean;\n  requiredError?: string;\n  patternError?: string;\n\n  // Input events\n  onBlur?: (event: FocusEvent<HTMLInputElement>) => void;\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void;\n  onContextMenu?: (event: MouseEvent<HTMLInputElement>) => void;\n  onFocus?: (event: FocusEvent<HTMLInputElement>) => void;\n  onInput?: (event: FormEvent<HTMLInputElement>) => void;\n}\n\ninterface State {\n  value: string;\n  error: string;\n  invalid: boolean;\n}\n\nexport class BootstrapTextEdit extends Component<Props, State> {\n  static requiredError: string = 'Input required';\n  static patternError: string = 'Incorrect pattern';\n  formName: string;\n  ref: RefObject<HTMLInputElement>;\n  regex: RegExp;\n  requiredError: string;\n  patternError: string;\n  hasLostFocus: boolean;\n  touched: boolean;\n\n  static sedDetaulErrorMessages(requiredError: string, patternError: string) {\n    this.requiredError = requiredError;\n    this.patternError = patternError;\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      value: props.value || '',\n      error: '',\n      invalid: false\n    }\n\n    if (props.pattern) {\n      this.regex = new RegExp(props.pattern);\n    }\n\n    this.ref = createRef<HTMLInputElement>();\n    this.requiredError = props.requiredError || BootstrapTextEdit.requiredError;\n    this.patternError = props.patternError || BootstrapTextEdit.patternError;\n    this.touched = !!props.invalid;\n    this.hasLostFocus = !!props.invalid;\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"form-group\">\n        {\n          !!this.props.label && (\n            <label className={this.state.invalid ? 'text-danger' : ''}>\n              {this.props.label}: {\n                this.props.required && <span className=\"ml-1 text-danger\">*</span>\n              }\n            </label>\n          )\n        }\n        \n        <input ref={this.ref} id={this.props.id} name={this.props.name} type={this.props.type || 'text'}\n          className={'form-control' + (this.state.invalid ? ' is-invalid' : '')} autoComplete={this.props.autoComplete}\n          autoFocus={this.props.autoFocus} disabled={this.props.disabled} form={this.props.form}\n          formNoValidate={this.props.formNoValidate} max={this.props.max} maxLength={this.props.maxLength}\n          min={this.props.min} minLength={this.props.minLength} pattern={this.props.pattern}\n          placeholder={this.props.placeholder} readOnly={this.props.readOnly} required={this.props.required}\n          size={this.props.size} step={this.props.step} value={this.state.value}\n        \n          onBlur={this.onBlur.bind(this.props.onBlur)} onChange={this.onChange}\n          onContextMenu={this.props.onContextMenu} onFocus={this.props.onFocus} onInput={this.props.onInput}\n        />\n        \n        {\n          (!!this.state.error || this.props.maxLength) && (\n            <div className=\"row\">\n              {\n                <div className=\"col\">\n                  {\n                    !!this.state.error && <small className=\"form-text text-danger\">{this.state.error}</small>\n                  }\n                </div>\n              }\n              \n              {\n                this.props.maxLength && (\n                  <div className=\"col-auto\">\n                    <small className=\"form-text text-muted\">\n                      {this.state.value.length} / {this.props.maxLength}\n                    </small>\n                  </div>\n                )\n              }\n            </div>\n          )\n        }\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    if (!this.ref || !this.ref.current) {\n      return;\n    }\n\n    let dom: HTMLElement = this.ref.current;\n    if (this.props.invalid) {\n      this.setAsInvalid();\n    }\n\n    while (!(dom instanceof HTMLFormElement)) {\n      if (!dom.parentElement) {\n        return;\n      }\n\n      dom = dom.parentElement;\n    }\n\n    this.formName = dom.getAttribute('name') || '';\n    registerInput(this, this.formName);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.invalid != this.props.invalid) {\n      this.setAsInvalid();\n    }\n\n    if (prevProps.pattern != this.props.pattern && this.props.pattern) {\n      this.regex = new RegExp(this.props.pattern);\n    }\n\n    if (this.props.value !== undefined && this.props.value != this.state.value) {\n      this.setState({\n        value: this.props.value\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.formName) {\n      removeInput(this.formName, this.props.name);\n    }\n  }\n\n  onChange(event: React.ChangeEvent<HTMLInputElement>) {\n    this.touched = true;\n    this.validateInput();\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    } else {\n      this.setState({ value: event.currentTarget.value });\n    }\n  }\n\n  onBlur(event: React.FocusEvent<HTMLInputElement>) {\n    this.hasLostFocus = true;\n    this.validateInput();\n    this.props.onBlur && this.props.onBlur(event);\n  }\n\n  validateInput(): boolean {\n    const invalid = this.state.invalid;\n    const input = this.ref.current;\n    if (!input || !this.touched || !this.hasLostFocus) {\n      return true;\n    }\n\n    if (input.required && !input.value) {\n      this.state.error != this.requiredError && this.setState({\n        invalid: true,\n        error: this.requiredError\n      });\n      return false;\n    } else if (this.regex && !this.regex.test(input.value)) {\n      this.state.error != this.patternError && this.setState({\n        invalid: true,\n        error: this.patternError\n      });\n      return false;\n    } else if (invalid) {\n      this.setState({\n        invalid: false,\n        error: ''\n      });\n    }\n\n    return true;\n  }\n\n  setAsInvalid() {\n    this.touched = true;\n    this.hasLostFocus = true;\n    this.validateInput();\n  }\n}\n","import React, { useState } from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { BootstrapTextEdit } from 'react-bootstrap-input';\r\n\r\nexport function BootstrapInputDoc() {\r\n  const [value, setState] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        The component <code>{'<SyntaxHighlighter />'}</code> renders a HTML input inside of a div with\r\n        the <code>form-control</code> and <code>form-group</code> respective class.\r\n      </p>\r\n      <p>\r\n        This component is limited to use just type inputs, currently is not posible renders checkbox,\r\n        radio buttons, range, etc.\r\n      </p>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <BootstrapTextEdit name=\"inputBasic\" value={value} onChange={event => setState(event.currentTarget.value)} />\r\n        </div>\r\n      </div>\r\n      <SyntaxHighlighter language=\"jsx\">\r\n        {\r\n          '<BootstrapTextEdit name=\"inputBasic\" />'\r\n        }\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { BootstrapTextEdit } from 'react-bootstrap-input';\r\n\r\nexport function BootstrapInputLabelDoc() {\r\n  const [value, setState] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        You can add a label to the input with the attribute <code>label</code>\r\n      </p>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <BootstrapTextEdit name=\"inputLabel\" label=\"Basic input\" value={value} onChange={event => setState(event.currentTarget.value)} />\r\n        </div>\r\n      </div>\r\n      <SyntaxHighlighter language=\"jsx\">\r\n        {\r\n          '<BootstrapTextEdit name=\"inputBasic\" label=\"Basic input\" />'\r\n        }\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { BootstrapTextEdit } from 'react-bootstrap-input';\r\n\r\nexport function BootstrapInputRequiredDoc() {\r\n  const [value, setState] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        When you add the attribute required it adds an value validator taht checks if it's not null\r\n        at time to it's touched and blur, if any of the requirements is not met, the validation is not fired.\r\n      </p>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <BootstrapTextEdit name=\"inputLabel\" label=\"Required input\" value={value} onChange={event => setState(event.currentTarget.value)} required />\r\n        </div>\r\n      </div>\r\n      <SyntaxHighlighter language=\"jsx\">\r\n        {\r\n          '<BootstrapTextEdit name=\"inputLabel\" label=\"Required input\" required />'\r\n        }\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { BootstrapTextEdit } from 'react-bootstrap-input';\r\n\r\nexport function BootstrapInputPatternDoc() {\r\n  const [value, setState] = useState('');\r\n  const link = 'https://www.w3schools.com/tags/att_input_pattern.asp';\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        You can add customs validators with the attribute <code>pattern</code>, it helps you to set\r\n        custom regex at validate the input, if yout have any questions to how it works, you can visit\r\n        the follow link <a href={link}>{link}</a>\r\n      </p>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <BootstrapTextEdit name=\"inputLabel\" label=\"Custom validator\" value={value} onChange={event => setState(event.currentTarget.value)} placeholder=\"Add only capital letters\" pattern=\"^[A-Z]+$\" />\r\n        </div>\r\n      </div>\r\n      <SyntaxHighlighter language=\"jsx\">\r\n        {\r\n          '<BootstrapTextEdit name=\"inputLabel\" label=\"Custom validator\" placeholder=\"Add only capital letters\" pattern=\"^[A-Z]+$\" />'\r\n        }\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { BootstrapTextEdit } from 'react-bootstrap-input';\r\n\r\nexport function BootstrapInputCustomErrDoc() {\r\n  const [value, setState] = useState('');\r\n\r\n  return (\r\n    <div>\r\n      <p>\r\n        You can customize the error messages with the attributes <code>patternError</code> and <code>requiredError</code>\r\n\r\n      </p>\r\n      <div className=\"card\">\r\n        <div className=\"card-body\">\r\n          <BootstrapTextEdit name=\"inputLabel\" label=\"Custom error\" value={value} onChange={event => setState(event.currentTarget.value)} pattern=\"^[A-Z]+$\" requiredError=\"You must be fill this field\" patternError=\"You must type only capital letters\" required />\r\n        </div>\r\n      </div>\r\n      <SyntaxHighlighter language=\"jsx\">\r\n        {\r\n          '<BootstrapTextEdit name=\"inputLabel\" label=\"Custom error\" pattern=\"^[A-Z]+$\" requiredError=\"You must be fill this field\" patternError=\"You must type only capital letters\" required />'\r\n        }\r\n      </SyntaxHighlighter>\r\n    </div>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { BootstrapForm, BootstrapTextEdit } from 'react-bootstrap-input';\r\n\r\nexport function BootstrapFormDoc() {\r\n  const onSubmit = evt => {\r\n    alert('You submit the form');\r\n  }\r\n\r\n  return (\r\n    <BootstrapForm name=\"form1\">\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <BootstrapTextEdit name=\"name\" label=\"Name\" required />\r\n        </div>\r\n        <div className=\"col\">\r\n          <BootstrapTextEdit name=\"lastname\" label=\"Lastname\" required />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <BootstrapTextEdit type=\"email\" name=\"email\" label=\"Email\" required />\r\n        </div>\r\n        <div className=\"col\">\r\n          <BootstrapTextEdit type=\"tel\" name=\"phone\" label=\"Phone\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"text-right\">\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </BootstrapForm>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport { BootstrapTextEdit } from 'react-bootstrap-input';\r\nimport { BootstrapInputDoc } from './components/BootstrapInput/BootstrapInputDoc';\r\nimport { BootstrapInputLabelDoc } from './components/BootstrapInput/BootstrapInputLabelDoc';\r\nimport { BootstrapInputRequiredDoc } from './components/BootstrapInput/BootstrapInputRequiredDoc';\r\nimport { BootstrapInputPatternDoc } from './components/BootstrapInput/BootstrapInputPatternDoc';\r\nimport { BootstrapInputCustomErrDoc } from './components/BootstrapInput/BootstrapInputCustomErrDoc';\r\nimport { BootstrapFormDoc } from './components/BootstrapForm/BootstrapFormDoc';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App = () => {\r\n  const [value, setState] = useState({\r\n    inputBasic: '',\r\n    inputLabel: '',\r\n    inputRequired: '',\r\n    inputRegex: '',\r\n    inputCustomErr: '',\r\n    inputDefaultError: ''\r\n  });\r\n\r\n  const handleChanges = event => {\r\n    const input = event.currentTarget;\r\n    setState({ [input.name]: input.value} );\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>BootstrapInput</h1>\r\n      <BootstrapInputDoc />\r\n      <BootstrapInputLabelDoc />\r\n      <BootstrapInputRequiredDoc />\r\n      <BootstrapInputPatternDoc />\r\n      <BootstrapInputCustomErrDoc />\r\n      \r\n\r\n      <p>The input can start as error if you want</p>\r\n      <BootstrapTextEdit name=\"inputDefaultError\" label=\"Starts with error\" value={value.inputDefaultError} onChange={handleChanges} invalid={true} required />\r\n\r\n\r\n\r\n\r\n\r\n      <BootstrapTextEdit name=\"inputDefaultError\" label=\"Starts with error\" maxLength={10} />\r\n\r\n\r\n      <BootstrapFormDoc />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}